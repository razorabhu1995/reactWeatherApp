{"version":3,"sources":["components/LoadingScreen.js","components/WeatherInfo.js","App.js","reportWebVitals.js","index.js"],"names":["LoadingScreen","LinearProgress","WeatherInfo","data","refreshParentFunction","temperatureType","useState","detail","chartData","setCharData","handleRadioChange","event","target","value","className","Radio","checked","onChange","map","item","index","Card","variant","onClick","console","log","handleChartData","CardContent","Math","floor","temp","moment","date","format","ResponsiveContainer","height","BarChart","width","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Bar","fill","App","setData","setTemperatureType","fetchData","unit","a","process","fetch","then","res","json","result","tempList","list","total","counter","singleDayTemp","outerindex","innerindex","main","dt","push","tempObj","useEffect","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6afd3889.chunk.js","sourcesContent":["import React from 'react'\r\nimport {LinearProgress} from '@material-ui/core';\r\n\r\n\r\nfunction LoadingScreen() {\r\n  return (\r\n    <div>\r\n      <LinearProgress />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import React, {useState} from \"react\";\r\nimport {Radio, Card, CardContent} from '@material-ui/core';\r\nimport { ScrollMenu, VisibilityContext } from \"react-horizontal-scrolling-menu\";\r\nimport moment from 'moment';\r\nimport '../style/WeatherInfoStyle.css';\r\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\n\r\n\r\n\r\nfunction LeftArrow() {\r\n  const { isFirstItemVisible, scrollPrev } = React.useContext(VisibilityContext)\r\n\r\n  return (\r\n    <button disabled={isFirstItemVisible} onClick={() => scrollPrev()}>\r\n      Left\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction RightArrow() {\r\n  const { isLastItemVisible, scrollNext } = React.useContext(VisibilityContext)\r\n\r\n  return (\r\n    <button disabled={isLastItemVisible} onClick={() => scrollNext()}>\r\n      Right\r\n    </button>\r\n  );\r\n}\r\n\r\nfunction WeatherInfo({data , refreshParentFunction, temperatureType}) {\r\n\r\n  const [chartData, setCharData] = useState(data[0].detail);\r\n\r\n  const handleRadioChange = (event) => {\r\n    refreshParentFunction(event.target.value);\r\n  };\r\n\r\n  const handleChartData = (chartData) => {\r\n    console.log(chartData);\r\n    setCharData(chartData.detail);\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"radio-container\">\r\n        <div>\r\n          <Radio\r\n            checked={temperatureType === 'metric'}\r\n            onChange={handleRadioChange}\r\n            value=\"metric\"\r\n          />Celcius\r\n        </div>\r\n        <div>\r\n          <Radio\r\n            checked={temperatureType === 'imperial'}\r\n            onChange={handleRadioChange}\r\n            value=\"imperial\"\r\n          />Fahrenheit\r\n        </div>\r\n      </div>\r\n      <div className=\"weather-card-container\">\r\n          {data?.map((item, index) => (\r\n            <Card variant=\"outlined\" key={index} className=\"weather-card-items\" onClick={()=>handleChartData(item)}>\r\n              <CardContent>\r\n                <h1>{Math.floor(item.temp)}{(temperatureType === 'metric')? \"°C\" : \"°F\"}</h1> \r\n                <p>{moment(item.date * 1000).format(\"Do MMM, YY\")}</p>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n      </div>\r\n      <div className=\"chart-container\">\r\n        <ResponsiveContainer height={300}>\r\n          <BarChart\r\n            width={600}\r\n            height={300}\r\n            data={chartData}\r\n            margin={{\r\n              top: 5,\r\n              right: 30,\r\n              left: 20,\r\n              bottom: 5,\r\n            }}\r\n          >\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis dataKey=\"temp\" />\r\n            <Bar dataKey=\"temp\" fill=\"#8884d8\" />\r\n            <Bar dataKey=\"uv\" fill=\"#82ca9d\" />\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default WeatherInfo\r\n","import './App.css';\nimport React, { useEffect, useState } from \"react\";\n\nimport LoadingScreen from './components/LoadingScreen';\nimport WeatherInfo from './components/WeatherInfo';\nimport moment from 'moment';\n\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [temperatureType, setTemperatureType] = useState('imperial');\n\n\n  const fetchData = async (unit) => {\n    setData([]);\n    console.log(\"here\",process.env);\n    await fetch(`${process.env.REACT_APP_API_URL}/forecast?q=Kathmandu&APPID=${process.env.REACT_APP_API_KEY}&units=${unit}`)\n    .then(res => res.json())\n    .then(result => {\n      console.log(result);\n      // setData(result.list);\n      var tempList = result.list;\n      var total = 0;\n      var average = 0;\n      var counter = 0;\n      var singleDayTemp = [];\n      for (let outerindex = 1; outerindex < 6; outerindex++) {\n        for (let innerindex = counter * 8; innerindex < 8*outerindex; innerindex++){\n          total += tempList[innerindex].main.temp;\n          var item = {\n            temp : tempList[innerindex].main.temp,\n            date :  moment(tempList[innerindex].dt * 1000).format(\"h a\")\n          }\n          singleDayTemp.push(item);\n        }\n        average = total / 8;\n        var tempObj = {\n          temp : average,\n          date : tempList[counter * 8].dt,\n          detail: singleDayTemp\n        }\n        average= 0;\n        total = 0;\n        singleDayTemp = [];\n        console.log(tempObj);\n        setData((data) => [...data, tempObj]);\n        counter++;\n      }\n    });\n  }\n\n  useEffect(() => {\n    fetchData('imperial');\n  }, []);\n\n  const refreshParentFunction = (temperatureType) => {\n    setTemperatureType(temperatureType);\n    fetchData(temperatureType);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        (data.length === 0)? (\n          <LoadingScreen/>\n        ) : (\n          <WeatherInfo data={data} refreshParentFunction={refreshParentFunction} temperatureType={temperatureType} />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}